program kuutio;
uses kamaa,tpr,crt,dos;
const NAPPMAARA=6;
      KEYBOARDINTR = 9;
      KEYBOARDPORT = $60;

var BIOSKeyboardHandler : procedure;
    CallBIOSHandler : boolean;
    PISTE:ARRAY[1..8,1..3]OF INTEGER;
    OLDX,OLDY,OLDZ,UUSIX,UUSIY,UUSIZ:ARRAY[1..8]OF INTEGER;
    VIIVE,I:INTEGER;
    XANGLE,YANGLE,ZANGLE:REAL;
    LOPPU:BOOLEAN;
    NAPP:ARRAY[1..NAPPMAARA]OF BOOLEAN;

{$F+}
procedure KeyboardHandler(Flags, CS, IP, AX, BX, CX, DX,
                          SI, DI, DS, ES, BP: Word);
interrupt;
var key : byte;
begin
  { a,s,d,  z,x,c }
  key := Port[KEYBOARDPORT];
  IF KEY=30 THEN NAPP[1]:=TRUE;
  IF KEY=30+128 THEN NAPP[1]:=FALSE;
  IF KEY=31 THEN NAPP[2]:=TRUE;
  IF KEY=31+128 THEN NAPP[2]:=FALSE;
  IF KEY=44 THEN NAPP[3]:=TRUE;
  IF KEY=44+128 THEN NAPP[3]:=FALSE;
  IF KEY=45 THEN NAPP[4]:=TRUE;
  IF KEY=45+128 THEN NAPP[4]:=FALSE;
  IF KEY=32 THEN NAPP[5]:=TRUE;
  IF KEY=32+128 THEN NAPP[5]:=FALSE;
  IF KEY=46 THEN NAPP[6]:=TRUE;
  IF KEY=46+128 THEN NAPP[6]:=FALSE;
  IF KEY=1 THEN LOPPU:=TRUE;
  if CallBIOSHandler then
    begin
      asm pushf end;
      BIOSKeyboardHandler;
    end
  else Port[$20] := $20;
end;
{$F-}

PROCEDURE PYORITA(X,Y,Z:INTEGER; XAN,YAN,ZAN:REAL; VAR NEWX,NEWY,NEWZ:INTEGER);
BEGIN
  NEWX:=ROUND(X*(SIN(YAN)*SIN(ZAN)*SIN(XAN)+COS(YAN)*COS(XAN))+Y*(COS(ZAN)*SIN(XAN))+
  Z*(COS(YAN)*SIN(ZAN)*SIN(XAN)-COS(XAN)*SIN(YAN)));
  NEWY:=ROUND(X*(COS(XAN)*SIN(YAN)*SIN(ZAN)-COS(YAN)*SIN(XAN))+Y*(COS(ZAN)*COS(XAN))+
  Z*(COS(YAN)*COS(XAN)*SIN(ZAN)+SIN(YAN)*SIN(XAN)));
  NEWZ:=ROUND(X*(COS(YAN)*SIN(ZAN)*SIN(XAN)-COS(XAN)*SIN(YAN))+
  Y*(-SIN(ZAN))+Z*(COS(YAN)*COS(ZAN)));
END;

PROCEDURE PLAY;
BEGIN
  IF NAPP[1]=TRUE THEN XANGLE:=XANGLE+0.01;
  IF NAPP[2]=TRUE THEN YANGLE:=YANGLE+0.01;
  IF NAPP[3]=TRUE THEN XANGLE:=XANGLE-0.01;
  IF NAPP[4]=TRUE THEN YANGLE:=YANGLE-0.01;
  IF NAPP[5]=TRUE THEN ZANGLE:=ZANGLE+0.01;
  IF NAPP[6]=TRUE THEN ZANGLE:=ZANGLE-0.01;
  FOR I:=1 TO 8 DO BEGIN
    OLDX[I]:=UUSIX[I];
    OLDY[I]:=UUSIY[I];
    OLDZ[I]:=UUSIZ[I];
    PYORITA(PISTE[I,1],PISTE[I,2],PISTE[I,3],XANGLE,YANGLE,ZANGLE,UUSIX[I],UUSIY[I],UUSIZ[I]);
  END;
  LINE(UUSIX[1]+159,UUSIY[1]+99,UUSIX[2]+159,UUSIY[2]+99,11,VADDR);
  LINE(UUSIX[1]+159,UUSIY[1]+99,UUSIX[4]+159,UUSIY[4]+99,11,VADDR);
  LINE(UUSIX[1]+159,UUSIY[1]+99,UUSIX[5]+159,UUSIY[5]+99,11,VADDR);
  LINE(UUSIX[2]+159,UUSIY[2]+99,UUSIX[3]+159,UUSIY[3]+99,11,VADDR);
  LINE(UUSIX[2]+159,UUSIY[2]+99,UUSIX[6]+159,UUSIY[6]+99,11,VADDR);
  LINE(UUSIX[3]+159,UUSIY[3]+99,UUSIX[7]+159,UUSIY[7]+99,11,VADDR);
  LINE(UUSIX[3]+159,UUSIY[3]+99,UUSIX[4]+159,UUSIY[4]+99,11,VADDR);
  LINE(UUSIX[4]+159,UUSIY[4]+99,UUSIX[8]+159,UUSIY[8]+99,11,VADDR);
  LINE(UUSIX[5]+159,UUSIY[5]+99,UUSIX[6]+159,UUSIY[6]+99,11,VADDR);
  LINE(UUSIX[5]+159,UUSIY[5]+99,UUSIX[8]+159,UUSIY[8]+99,11,VADDR);
  LINE(UUSIX[6]+159,UUSIY[6]+99,UUSIX[7]+159,UUSIY[7]+99,11,VADDR);
  LINE(UUSIX[7]+159,UUSIY[7]+99,UUSIX[8]+159,UUSIY[8]+99,11,VADDR);
  flip;
  LINE(OLDX[1]+159,OLDY[1]+99,OLDX[2]+159,OLDY[2]+99,0,VADDR);
  LINE(OLDX[1]+159,OLDY[1]+99,OLDX[4]+159,OLDY[4]+99,0,VADDR);
  LINE(OLDX[1]+159,OLDY[1]+99,OLDX[5]+159,OLDY[5]+99,0,VADDR);
  LINE(OLDX[2]+159,OLDY[2]+99,OLDX[3]+159,OLDY[3]+99,0,VADDR);
  LINE(OLDX[2]+159,OLDY[2]+99,OLDX[6]+159,OLDY[6]+99,0,VADDR);
  LINE(OLDX[3]+159,OLDY[3]+99,OLDX[7]+159,OLDY[7]+99,0,VADDR);
  LINE(OLDX[3]+159,OLDY[3]+99,OLDX[4]+159,OLDY[4]+99,0,VADDR);
  LINE(OLDX[4]+159,OLDY[4]+99,OLDX[8]+159,OLDY[8]+99,0,VADDR);
  LINE(OLDX[5]+159,OLDY[5]+99,OLDX[6]+159,OLDY[6]+99,0,VADDR);
  LINE(OLDX[5]+159,OLDY[5]+99,OLDX[8]+159,OLDY[8]+99,0,VADDR);
  LINE(OLDX[6]+159,OLDY[6]+99,OLDX[7]+159,OLDY[7]+99,0,VADDR);
  LINE(OLDX[7]+159,OLDY[7]+99,OLDX[8]+159,OLDY[8]+99,0,VADDR);
END;

BEGIN
  CallBIOSHandler := false;
  GetIntVec(KEYBOARDINTR, @BIOSKeyboardHandler);
  SetIntVec(KEYBOARDINTR, Addr(KeyboardHandler));
  PISTE[1,1]:=10;
  PISTE[1,2]:=10;
  PISTE[1,3]:=10;
  PISTE[2,1]:=10;
  PISTE[2,2]:=-10;
  PISTE[2,3]:=10;
  PISTE[3,1]:=-10;
  PISTE[3,2]:=-10;
  PISTE[3,3]:=10;
  PISTE[4,1]:=-10;
  PISTE[4,2]:=10;
  PISTE[4,3]:=10;
  PISTE[5,1]:=10;
  PISTE[5,2]:=10;
  PISTE[5,3]:=-10;
  PISTE[6,1]:=10;
  PISTE[6,2]:=-10;
  PISTE[6,3]:=-10;
  PISTE[7,1]:=-10;
  PISTE[7,2]:=-10;
  PISTE[7,3]:=-10;
  PISTE[8,1]:=-10;
  PISTE[8,2]:=10;
  PISTE[8,3]:=-10;
  SETMCGA;
  SETUPVIRTUAL;
  CLS(0,VADDR);
  REPEAT
    PLAY;
  UNTIL LOPPU=TRUE;
  SHUTDOWN;
  SETTEXT;
  SetIntVec(KEYBOARDINTR, @BIOSKeyboardHandler);
END.