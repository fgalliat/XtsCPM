#ifndef __BRIDGED_SCREEN_H_
#define __BRIDGED_SCREEN_H_ 1

// #include <stdint.h>

//#define rgb16(r,g,b) { (uint16_t)( (( r *31/255 )<<11) | (( g *63/255 )<<5) | ( b *31/255 ) ) }
//#define rgb16(r,g,b) { (int)( (( r *31/255 )<<11) | (( g *63/255 )<<5) | ( b *31/255 ) ) }
//static const uint16_t rgb16(uint8_t r,uint8_t g,uint8_t b) {return (uint16_t)( (( r *31/255 )<<11) | (( g *63/255 )<<5) | ( b *31/255 ) );}

extern uint16_t rgb(uint8_t r,uint8_t g,uint8_t b); 
#define rgb16 rgb

// #define CLR_CYAN  rgb16(0,255,255)
// #define CLR_PINK  rgb16(255,0,150)
// #define CLR_RED   rgb16(255,0,0)
// #define CLR_GREEN rgb16(0,255,0)
extern const uint16_t CLR_GREEN;
extern const uint16_t CLR_RED;
extern const uint16_t CLR_PINK;
extern const uint16_t CLR_CYAN;


//#define CLR_BLUE  rgb16(0,0,255)
// #define CLR_BLACK 0
extern const uint16_t CLR_BLUE;
extern const uint16_t CLR_BLACK;
extern const uint16_t CLR_WHITE;
// #define CLR_WHITE rgb16(255,255,255)
#define _CLR_WHITE rgb16(255,255,255)

#define CLR_LIGHTGRAY rgb16(200,200,200)
#define CLR_GRAY      rgb16(128,128,128)
#define CLR_DARKGRAY  rgb16(50,50,50)

#define CLR_LIGHTGREEN rgb16(150,255,150)
#define CLR_DARKGREEN  rgb16(0,150,0)



//#define CLR_WHITE 0xFFFF

//#define SCREEN_WIDTH 320
//#define SCREEN_HEIGHT 240
extern int SCREEN_WIDTH;
extern int SCREEN_HEIGHT;

#define MODE_FILL 1
#define MODE_DRAW 0
  // ____________________________________________
  #define TEXT_OVERWRITE 0x00 // w/ BG
  #define TEXT_INCRUST   0x01 // w/o BG
  

  #define SIG_MCU_RESET       0x01
  #define SIG_MCU_MASTER_SYNC 0x02 // Query
  #define SIG_MCU_SLAVE_SYNC  0x03 // Answer
  #define SIG_MCU_UPLOAD_BDG  0x04 // Upload via Bridge
  #define SIG_MCU_DIR2        0x05 // DIR onMCU#2
  #define SIG_MCU_UPLOAD_SER  0x06 // Upload via Main Serial line

  #define SIG_MP3_PLAY  0x11
  #define SIG_MP3_PAUSE 0x12
  #define SIG_MP3_NEXT  0x13
  #define SIG_MP3_PREV  0x14
  #define SIG_MP3_VOL   0x15
  #define SIG_MP3_STOP  0x16

  #define SIG_SCR_MODE          0x21
  #define SIG_SCR_CLEAR         0x22
  #define SIG_SCR_CURSOR        0x23 // TTY cursor
  #define SIG_SCR_COLOR         0x24 // Text + Shapes ?
  #define SIG_SCR_BLITT         0x25
  #define SIG_SCR_TXTMODE       0x26
  // ____________________________________________

  class WiredScreen {
      private:
      	void drawBitmapImg(int x, int y, uint8_t* raster, int color);
      	void drawColoredImg(int x, int y, int w, int h, uint16_t* raster);
      	void drawColoredSprite(int x, int y, int w, int h, int sx, int sy, int sw, int sh, uint16_t* raster);
      	void drawPixShaded(int x, int y, uint16_t color, int fromMode );
      	
      	int_least16_t drawChar(int_least16_t x, int_least16_t y, char c, uint_least16_t color, uint_least16_t bg, uint_least8_t size);
      	void DrawChar(char c, uint16_t x, uint16_t y, uint16_t color);
      
      public:
        WiredScreen();
        ~WiredScreen();

        bool init(int arg=0);
        void close();

        void cls(uint16_t bgColor=CLR_BLACK);
        void setCursor(int x, int y);

        // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        void setCursorPx(int x, int y);
        void setTextColor(u_int16_t fgColor=CLR_WHITE);
        void write(char ch);

        void screenRotate(bool portrait);
        // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        void print(int val);
        void print(float val);
        void print(char* str);
        void println(char* str);
        void dispStr(char* str, int x, int y, uint16_t color=_CLR_WHITE);

        void drawBPP(char* name, int x, int y);
        void drawPCT(char* name, int x, int y);
        void drawPCTSprite(char* name, int x, int y, int w, int h, int sx, int sy);
        
        void drawRGB16(int x, int y, int w, int h, uint16_t* raster);

        void drawPixel(int x, int y, uint16_t color=1);
        void drawLine(int x, int y, int x2, int y2, uint16_t color=1);
        void drawRect(int x, int y, int w, int h, uint8_t mode=0, uint16_t color=1);
        void drawCircle(int x, int y, int radius, uint8_t mode=0, uint16_t color=1);
        void drawTriangle(int x, int y, int x2, int y2, int x3, int y3, uint8_t mode=0, uint16_t color=1);

        void drawBall(int x, int y, int radius, uint16_t color=1);

        void drawAnimatedBackground(int mode, int m1, int m2, int m3, int m4);
        void drawAnimatedBackground(int mode, uint8_t* scene, int sceneLen);

        void blitt(uint8_t mode);
        // setMode(int mode);
  };

// a try for same tiny font used on Teensy 3.6 version
static const uint8_t tiny_font_PGM[] =
    {

      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20   (0)
      0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, // 0x21 ! (1)
      0x00, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x22 " (2)
      0x00, 0x0A, 0x0E, 0x0E, 0x0A, 0x00, 0x00, 0x00, // 0x23 # (3)
      0x04, 0x0C, 0x0A, 0x06, 0x04, 0x00, 0x00, 0x00, // 0x24 $ (4)
      0x00, 0x0A, 0x06, 0x08, 0x0A, 0x00, 0x00, 0x00, // 0x25 % (5)
      0x00, 0x04, 0x0A, 0x04, 0x0E, 0x00, 0x00, 0x00, // 0x26 & (6)
      0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x27 ' (7)
      0x00, 0x02, 0x04, 0x04, 0x02, 0x00, 0x00, 0x00, // 0x28 ( (8)
      0x00, 0x08, 0x04, 0x04, 0x08, 0x00, 0x00, 0x00, // 0x29 ) (9)
      0x00, 0x00, 0x0E, 0x0A, 0x00, 0x00, 0x00, 0x00, // 0x2A * (10)
      0x00, 0x00, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00, // 0x2B + (11)
      0x00, 0x00, 0x00, 0x00, 0x04, 0x0C, 0x00, 0x00, // 0x2C , (12)
      0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x2D - (13)
      0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // 0x2E . (14)
      0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x00, 0x00, // 0x2F / (15)
      0x00, 0x0E, 0x0A, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x30 0 (16)
      0x00, 0x04, 0x0C, 0x04, 0x0E, 0x00, 0x00, 0x00, // 0x31 1 (17)
      0x08, 0x0E, 0x04, 0x08, 0x0E, 0x00, 0x00, 0x00, // 0x32 2 (18)
      0x00, 0x0E, 0x06, 0x02, 0x0E, 0x00, 0x00, 0x00, // 0x33 3 (19)
      0x02, 0x0A, 0x0E, 0x02, 0x02, 0x00, 0x00, 0x00, // 0x34 4 (20)
      0x00, 0x0E, 0x0E, 0x02, 0x0E, 0x00, 0x00, 0x00, // 0x35 5 (21)
      0x00, 0x0E, 0x0E, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x36 6 (22)
      0x00, 0x0E, 0x02, 0x04, 0x04, 0x00, 0x00, 0x00, // 0x37 7 (23)
      0x00, 0x0E, 0x0E, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x38 8 (24)
      0x00, 0x0E, 0x0E, 0x02, 0x0E, 0x00, 0x00, 0x00, // 0x39 9 (25)
      0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, // 0x3A : (26)
      0x00, 0x00, 0x04, 0x00, 0x04, 0x0C, 0x00, 0x00, // 0x3B ; (27)
      0x00, 0x02, 0x04, 0x0C, 0x02, 0x00, 0x00, 0x00, // 0x3C < (28)
      0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, // 0x3D = (29)
      0x00, 0x08, 0x04, 0x0A, 0x0C, 0x00, 0x00, 0x00, // 0x3E > (30)
      0x08, 0x0E, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, // 0x3F ? (31)
      0x00, 0x0E, 0x0A, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x40 @ (32)
      0x00, 0x0E, 0x0E, 0x0A, 0x0A, 0x00, 0x00, 0x00, // 0x41 A (33)
      0x00, 0x0E, 0x0A, 0x0C, 0x0E, 0x00, 0x00, 0x00, // 0x42 B (34)
      0x00, 0x0E, 0x08, 0x08, 0x0E, 0x00, 0x00, 0x00, // 0x43 C (35)
      0x00, 0x0C, 0x0A, 0x0A, 0x0C, 0x00, 0x00, 0x00, // 0x44 D (36)
      0x00, 0x0E, 0x0C, 0x08, 0x0E, 0x00, 0x00, 0x00, // 0x45 E (37)
      0x00, 0x0E, 0x0C, 0x08, 0x08, 0x00, 0x00, 0x00, // 0x46 F (38)
      0x00, 0x0E, 0x0A, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x47 G (39)
      0x02, 0x0A, 0x0E, 0x0A, 0x0A, 0x00, 0x00, 0x00, // 0x48 H (40)
      0x00, 0x0E, 0x04, 0x04, 0x0E, 0x00, 0x00, 0x00, // 0x49 I (41)
      0x00, 0x02, 0x02, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x4A J (42)
      0x00, 0x0A, 0x0A, 0x0E, 0x0A, 0x00, 0x00, 0x00, // 0x4B K (43)
      0x00, 0x08, 0x08, 0x08, 0x0E, 0x00, 0x00, 0x00, // 0x4C L (44)
      0x00, 0x0A, 0x0E, 0x0A, 0x0A, 0x00, 0x00, 0x00, // 0x4D M (45)
      0x00, 0x0A, 0x0E, 0x0A, 0x08, 0x00, 0x00, 0x00, // 0x4E N (46)
      0x00, 0x0E, 0x0A, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x4F O (47)
      0x00, 0x0E, 0x0E, 0x08, 0x08, 0x00, 0x00, 0x00, // 0x50 P (48)
      0x00, 0x0E, 0x0A, 0x0A, 0x0E, 0x02, 0x00, 0x00, // 0x51 Q (49)
      0x00, 0x0C, 0x0A, 0x0E, 0x0A, 0x00, 0x00, 0x00, // 0x52 R (50)
      0x00, 0x0E, 0x0E, 0x02, 0x0E, 0x00, 0x00, 0x00, // 0x53 S (51)
      0x00, 0x0E, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, // 0x54 T (52)
      0x00, 0x0A, 0x0A, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x55 U (53)
      0x00, 0x0A, 0x0A, 0x0A, 0x04, 0x00, 0x00, 0x00, // 0x56 V (54)
      0x00, 0x0A, 0x0A, 0x0E, 0x0A, 0x00, 0x00, 0x00, // 0x57 W (55)
      0x00, 0x0A, 0x0A, 0x0E, 0x0A, 0x00, 0x00, 0x00, // 0x58 X (56)
      0x00, 0x0A, 0x0A, 0x04, 0x04, 0x00, 0x00, 0x00, // 0x59 Y (57)
      0x08, 0x0E, 0x04, 0x08, 0x0E, 0x00, 0x00, 0x00, // 0x5A Z (58)
      0x00, 0x06, 0x04, 0x04, 0x06, 0x00, 0x00, 0x00, // 0x5B [ (59)
      0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x00, 0x00, // 0x5C \ (60)
      0x00, 0x0C, 0x04, 0x04, 0x0C, 0x00, 0x00, 0x00, // 0x5D ] (61)
      0x00, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x5E ^ (62)
      0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, // 0x5F _ (63)
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x60 ` (64)
      0x00, 0x0E, 0x0E, 0x0A, 0x0A, 0x00, 0x00, 0x00, // 0x61 a (65)
      0x00, 0x0E, 0x0A, 0x0C, 0x0E, 0x00, 0x00, 0x00, // 0x62 b (66)
      0x00, 0x0E, 0x08, 0x08, 0x0E, 0x00, 0x00, 0x00, // 0x63 c (67)
      0x00, 0x0C, 0x0A, 0x0A, 0x0C, 0x00, 0x00, 0x00, // 0x64 d (68)
      0x00, 0x0E, 0x0C, 0x08, 0x0E, 0x00, 0x00, 0x00, // 0x65 e (69)
      0x00, 0x0E, 0x0C, 0x08, 0x08, 0x00, 0x00, 0x00, // 0x66 f (70)
      0x00, 0x0E, 0x0A, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x67 g (71)
      0x02, 0x0A, 0x0E, 0x0A, 0x0A, 0x00, 0x00, 0x00, // 0x68 h (72)
      0x00, 0x0E, 0x04, 0x04, 0x0E, 0x00, 0x00, 0x00, // 0x69 i (73)
      0x00, 0x02, 0x02, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x6A j (74)
      0x00, 0x0A, 0x0A, 0x0E, 0x0A, 0x00, 0x00, 0x00, // 0x6B k (75)
      0x00, 0x08, 0x08, 0x08, 0x0E, 0x00, 0x00, 0x00, // 0x6C l (76)
      0x00, 0x0A, 0x0E, 0x0A, 0x0A, 0x00, 0x00, 0x00, // 0x6D m (77)
      0x00, 0x0A, 0x0E, 0x0A, 0x08, 0x00, 0x00, 0x00, // 0x6E n (78)
      0x00, 0x0E, 0x0A, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x6F o (79)
      0x00, 0x0E, 0x0E, 0x08, 0x08, 0x00, 0x00, 0x00, // 0x70 p (80)
      0x00, 0x0E, 0x0A, 0x0A, 0x0E, 0x02, 0x00, 0x00, // 0x71 q (81)
      0x00, 0x0C, 0x0A, 0x0E, 0x0A, 0x00, 0x00, 0x00, // 0x72 r (82)
      0x00, 0x0E, 0x0E, 0x02, 0x0E, 0x00, 0x00, 0x00, // 0x73 s (83)
      0x00, 0x0E, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, // 0x74 t (84)
      0x00, 0x0A, 0x0A, 0x0A, 0x0E, 0x00, 0x00, 0x00, // 0x75 u (85)
      0x00, 0x0A, 0x0A, 0x0A, 0x04, 0x00, 0x00, 0x00, // 0x76 v (86)
      0x00, 0x0A, 0x0A, 0x0E, 0x0A, 0x00, 0x00, 0x00, // 0x77 w (87)
      0x00, 0x0A, 0x0A, 0x0E, 0x0A, 0x00, 0x00, 0x00, // 0x78 x (88)
      0x00, 0x0A, 0x0A, 0x04, 0x04, 0x00, 0x00, 0x00, // 0x79 y (89)
      0x08, 0x0E, 0x04, 0x08, 0x0E, 0x00, 0x00, 0x00, // 0x7A z (90)
      0x00, 0x06, 0x0C, 0x04, 0x04, 0x00, 0x00, 0x00, // 0x7B { (91)
      0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, // 0x7C | (92)
      0x00, 0x0C, 0x06, 0x04, 0x0C, 0x00, 0x00, 0x00, // 0x7D } (93)
      0x00, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x7E ~ (94)
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00// 0x7F $delta$ (95)

    };






#endif
